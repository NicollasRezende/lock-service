package com.example.article.lock.portlet.command;

import com.example.article.lock.service.ArticleEditLockLocalService;
import com.liferay.journal.constants.JournalPortletKeys;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCRenderCommand;
import com.liferay.portal.kernel.portlet.bridges.mvc.constants.MVCRenderConstants;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.ServiceContextFactory;
import com.liferay.portal.kernel.theme.ThemeDisplay;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.Portal;
import com.liferay.portal.kernel.util.WebKeys;

import javax.portlet.PortletException;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;

import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.component.annotations.ReferenceCardinality;
import org.osgi.service.component.annotations.ReferencePolicy;

@Component(
        immediate = true,
        property = {
                "javax.portlet.name=" + JournalPortletKeys.JOURNAL,
                "mvc.command.name=/journal/edit_article",
                "service.ranking:Integer=1000"
        },
        service = MVCRenderCommand.class
)
public class EditArticleRenderCommand implements MVCRenderCommand {

    @Override
    public String render(
            RenderRequest renderRequest, RenderResponse renderResponse)
            throws PortletException {

        try {
            ThemeDisplay themeDisplay = (ThemeDisplay) renderRequest.getAttribute(
                    WebKeys.THEME_DISPLAY);

            String articleId = ParamUtil.getString(renderRequest, "articleId");

            // Debug
            System.out.println("EditArticleRenderCommand - articleId: " + articleId);

            if (articleId != null && !articleId.isEmpty()) {
                ServiceContext serviceContext = ServiceContextFactory.getInstance(
                        renderRequest);

                // Verifica se o artigo está bloqueado por outro usuário
                if (_articleEditLockLocalService.isArticleLockedByOtherUser(
                        articleId, themeDisplay.getUserId())) {

                    // Obtém informações do usuário que está editando
                    com.liferay.portal.kernel.model.User editingUser =
                            _articleEditLockLocalService.getEditingUser(articleId);

                    if (editingUser != null) {
                        renderRequest.setAttribute("editingUser", editingUser);
                        renderRequest.setAttribute("articleLocked", true);
                        renderRequest.setAttribute("lockedArticleId", articleId);

                        // Retorna o modal
                        return "/article_locked_modal.jsp";
                    }
                }

                // Tenta criar o lock
                boolean lockCreated = _articleEditLockLocalService.tryLockArticle(
                        articleId, themeDisplay.getUserId(), serviceContext);

                if (!lockCreated) {
                    // Não conseguiu criar o lock
                    com.liferay.portal.kernel.model.User editingUser =
                            _articleEditLockLocalService.getEditingUser(articleId);

                    renderRequest.setAttribute("editingUser", editingUser);
                    renderRequest.setAttribute("articleLocked", true);
                    renderRequest.setAttribute("lockedArticleId", articleId);

                    return "/article_locked_modal.jsp";
                }
            }

        } catch (Exception e) {
            throw new PortletException(e);
        }

        // IMPORTANTE: Chama o comando original para preparar o contexto
        if (_originalCommand != null) {
            return _originalCommand.render(renderRequest, renderResponse);
        }

        // Se não encontrar o comando original, usa o comportamento padrão
        return MVCRenderConstants.MVC_PATH_VALUE_SKIP_DISPATCH;
    }

    @Reference
    private ArticleEditLockLocalService _articleEditLockLocalService;

    @Reference
    private Portal _portal;

    @Reference(
            cardinality = ReferenceCardinality.OPTIONAL,
            policy = ReferencePolicy.DYNAMIC,
            target = "(!(component.name=com.example.article.lock.portlet.command.EditArticleRenderCommand))"
    )
    private volatile MVCRenderCommand _originalCommand;
}